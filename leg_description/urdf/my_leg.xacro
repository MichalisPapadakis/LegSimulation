<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="RR">

<!-- Colors -->
<material name="blue">
  <color rgba="0 0 0.8 1"/>
</material>

<material name="red">
  <color rgba="0.8 0 0 1"/>
</material>

<material name="grey">
  <color rgba="0.5 0.5 0.5 1"/>
</material>

<material name="DarkGrey">
  <color rgba="0.3 0.3 0.3 1"/>
</material>

<!-- Defining macros -->
<xacro:property name="BaseHeight" value="0.5" />

<!-- Actuator -->
<xacro:property name="actuator_nudge" value="0.00666" />
<xacro:property name="actuator_cylinder_width" value="0.03084" />
<xacro:property name="actuator_total_width" value="0.05708" />
<xacro:property name="actuator_diameter" value="0.1031" />
<!-- "actuator_offset_from_peripheral_connector" -> AOFPC -->
<xacro:property name="AOFPC" value="0.05755" />

<!-- Actuator Limits -->
<xacro:property name="velocity_limit" value="398" />
<xacro:property name="effort_limit" value="0.8844" />

<!-- Link2 -->
<xacro:property name="link1_2D" value="0.089" />

<!-- Link3 -->
<xacro:property name="link2_3D" value="0.337" />
<xacro:property name="link3_angle_limit" value="2.15" />


<!-- Moment of inertia -->
<xacro:macro name="default_inertial" params="mass xl yl zl *Dorigin">
    <inertial>
            <mass value="${mass}" />
            <inertia ixx="${ mass * ( yl*yl + zl*zl ) / 12 }" ixy="0.0" ixz="0.0"
                     iyy="${ mass * ( xl*xl + zl*zl ) / 12 }" iyz="0.0"
                     izz="${ mass * ( yl*yl + xl*xl ) / 12 }" />
            <xacro:insert_block name="Dorigin" />
    </inertial>
</xacro:macro>


<!-- Addin objects: -->

<link name="world"/> 

<!-- Base Link  -->
<link name="base_link">
  <visual>
    <geometry>      
        <mesh scale=".001 .001 .001" filename="package://leg_description/meshes/Base.STL" />
    </geometry>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <material name="DarkGrey"/>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="${actuator_diameter}" length="${actuator_total_width}"/>
    </geometry>
    <origin rpy="${pi/2} 0 ${-pi/2}" xyz="0 0 0"/>
  </collision>
  <xacro:default_inertial mass="10" xl="1" yl="1" zl="1">
    <origin rpy="0 0 0" xyz="0 0 0" />
  </xacro:default_inertial>
</link>

 <joint name="world_joint" type="fixed">
  <parent link="world"/>
  <child link="base_link"/>
  <origin rpy="0 ${-pi/2} ${-pi/2}" xyz="${AOFPC} 0 ${BaseHeight}"/>
</joint>   


<!-- Link 1  -->
<link name="link1">
  <visual>
    <geometry>      
        <mesh scale=".001 .001 .001" filename="package://leg_description/meshes/link1.STL" />
    </geometry>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <!-- <origin rpy="0 ${-pi/2} ${-pi/2}" xyz="0 0 0"/> -->
    <material name="grey"/>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="${actuator_diameter}" length="${actuator_total_width}"/>
    </geometry>
    <origin rpy="${pi/2} 0 ${-pi/2}" xyz="0 0 0"/>
  </collision>
  <xacro:default_inertial mass="10" xl="1" yl="1" zl="1">
    <origin rpy="0 0 0" xyz="0 0 0" />
  </xacro:default_inertial>
</link>

<joint name="base_to_link1" type="revolute"> 
  <parent link="base_link"/>
  <child link="link1"/>
  <axis rpy = "0 0 0" xyz="0 0 1"/>
  <limit lower="${-pi/2}" upper="${pi/2}" effort="${effort_limit}" velocity="${velocity_limit}" />
  <origin rpy = "${pi} 0 0" xyz="0 0 ${actuator_cylinder_width/2+actuator_nudge +AOFPC}"/>
</joint>  

<transmission name="base_link1_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$motor1">
      <mechanicalReduction>7</mechanicalReduction>
    </actuator>
    <joint name="base_to_link1">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
  </transmission>

<!-- Link 2  -->
<link name="link2">
  <visual>
    <geometry>      
        <mesh scale=".001 .001 .001" filename="package://leg_description/meshes/link2stl.STL" />
    </geometry>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <material name="DarkGrey"/>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="${actuator_diameter}" length="${actuator_total_width}"/>
    </geometry>
    <origin rpy="${pi/2} 0 ${-pi/2}" xyz="0 0 0"/>
  </collision>
  <xacro:default_inertial mass="10" xl="1" yl="1" zl="1">
    <origin rpy="0 0 0" xyz="0 0 0" />
  </xacro:default_inertial>
</link>

<joint name="link1_to_link2" type="continuous"> 
  <parent link="link1"/>
  <child link="link2"/>
  <axis rpy = "0 0 0" xyz="0 0 1"/>
  <origin rpy = "${pi/2} ${pi/2} 0" xyz="0 ${-(  actuator_cylinder_width/2+actuator_nudge +link1_2D)}  0"/>
</joint> 

<transmission name="link1_link2_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$motor2">
      <mechanicalReduction>10</mechanicalReduction>
    </actuator>
    <joint name="link1_to_link2">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
  </transmission>

<!-- Link 3  -->
<link name="link3">
  <visual>
    <geometry>      
        <mesh scale=".001 .001 .001" filename="package://leg_description/meshes/link3stl.STL" />
    </geometry>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <material name="grey"/>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="${actuator_diameter}" length="${actuator_total_width}"/>
    </geometry>
    <origin rpy="${pi/2} 0 ${-pi/2}" xyz="0 0 0"/>
  </collision>
  <xacro:default_inertial mass="10" xl="1" yl="1" zl="1">
    <origin rpy="0 0 0" xyz="0 0 0" />
  </xacro:default_inertial>
</link>

<joint name="link2_to_link3" type="revolute"> 
  <parent link="link2"/>
  <child link="link3"/>
  <axis rpy = "0 0 0" xyz="0 0 1"/>
  <origin rpy = "0 0 0" xyz="${link2_3D} 0  0"/>
  <limit lower="${-link3_angle_limit}" upper="${link3_angle_limit}" effort="${effort_limit}" velocity="${velocity_limit}" />

</joint> 

<transmission name="link2_link3_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$motor3">
      <mechanicalReduction>10</mechanicalReduction>
    </actuator>
    <joint name="link2_to_link3">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
  </transmission>

<!-- Gazebo -->
<gazebo> 
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/leg</robotNamespace>
    </plugin>
</gazebo>


</robot>